name: Build host tools

on:
  workflow_call:
    inputs:
      use_openwrt_container:
        type: boolean
        # default: true
      generate_prebuilt_artifacts:
        type: boolean
      repo_url:
        required: true
        type: string
      repo_branch:
        required: true
        type: string
      author:
        required: true
        type: string
      owner-lc:
        required: true
        type: string
      container-tag:
        required: true
        type: string
      build_tools:
        type: boolean
        required: true
    outputs:
      push:
        value: ${{ jobs.build.outputs.push}}

permissions:
  contents: read

jobs:
  determine-container-info:
    name: Determine needed info to push containers
    runs-on: ubuntu-latest
    outputs:
      ccache_name: ${{ steps.determine_ccache_name.outputs.ccache_name }}
      use_tools_container: ${{ steps.check-container.outputs.use_tools_container}}
      container_path: ${{ steps.check-container.outputs.container_path}}

    steps:
      - name: Determine ccache name
        id: determine_ccache_name
        run: echo "ccache_name=ccache-kernel-${{ inputs.container-tag }}" >> $GITHUB_OUTPUT

      - name: check-container
        id: check-container
        run: |
          USE_TOOLS_CONTAINER=false
          CONTAINER_PATH=ghcr.io/openwrt/buildbot/buildworker-v3.11.1

          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)
          GHCR_HEADER="Authorization: Bearer ${GHCR_TOKEN}"
          GHCR_MANIFEST_LINK=https://ghcr.io/v2/${{ inputs.owner-lc }}/tools/manifests/${{ inputs.container-tag }}
          # Check if container exist
          if [ $(curl -s -o /dev/null -w "%{http_code}" -H "$GHCR_HEADER" -I "$GHCR_MANIFEST_LINK") == 200 -a ! echo ${{ inputs.build_tools }}]; then
            USE_TOOLS_CONTAINER=true
            CONTAINER_PATH=ghcr.io/${{ inputs.owner-lc }}/tools:${{ inputs.container-tag }}
          fi

          echo "use_tools_container=$USE_TOOLS_CONTAINER" | tee -a "$GITHUB_OUTPUT"
          echo "container_path=$CONTAINER_PATH" | tee -a "$GITHUB_OUTPUT"

  check:
    name: Check tools
    needs: [determine-container-info]
    runs-on: ubuntu-latest
    container: ${{ needs.determine-container-info.outputs.container_PATH }}
    outputs: 
      rebuild: ${{ steps.validate.outputs.rebuild }}

    steps:
      - name: Checkout openwrt
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_url }}
          ref: ${{ inputs.repo_branch }}
          path: openwrt

      - name: Fix permission
        run: chown -R buildbot:buildbot openwrt

      - name: Validate tools
        id: validate
        if: needs.determine-container-info.outputs.use_tools_container == 'true'
        run: |
          TOOLSHASH=$(echo ${{ hashFiles('openwrt/include/**','openwrt/tools/**') }})
          [ -f /.toolshash ] && [ $(grep -c "$TOOLSHASH" /.toolshash) -eq 1 ] || echo "rebuild=true" | tee -a "$GITHUB_OUTPUT"

  build:
    name: Build tools
    if: ${{ inputs.build_tools || !needs.determine-container-info.outputs.use_tools_container || needs.check.outputs.rebuild }}
    needs: [check,determine-container-info]
    runs-on: ubuntu-latest
    container: ${{ needs.determine-container-info.outputs.container_PATH }}
    outputs:
      push: ${{ steps.setoutput.outputs.push }}

    permissions:
      contents: read
      packages: read
      actions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout openwrt source code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_url }}
          ref: ${{ inputs.repo_branch }}
          path: openwrt

      - name: Fix permission
        run: chown -R buildbot:buildbot .

      - name: Prepare prebuilt tools
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          mkdir -p staging_dir build_dir
          ln -s /prebuilt_tools/staging_dir/host staging_dir/host
          ln -s /prebuilt_tools/build_dir/host build_dir/host

          ../.github/workflows/scripts/ext-tools.sh --refresh

      - name: Restore ccache cache
        id: restore-ccache-cache
        uses: actions/cache/restore@v4
        with:
          path: openwrt/.ccache
          key: ${{ needs.determine-container-info.outputs.ccache_name }}-${{ hashFiles('openwrt/include/**','openwrt/tools/**') }}
          restore-keys: |
            ${{ needs.determine-container-info.outputs.ccache_name }}-

      - name: Configure ccache and apply fixes
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        env:
          SYSTEM_CCACHE_CONF: staging_dir/host/etc/ccache.conf
        run: |
          mkdir -p staging_dir/host/etc
          touch $SYSTEM_CCACHE_CONF

          echo compiler_type=gcc >> $SYSTEM_CCACHE_CONF
          echo depend_mode=true >> $SYSTEM_CCACHE_CONF
          echo sloppiness=file_macro,locale,time_macros >> $SYSTEM_CCACHE_CONF

      - name: Set configs for tools container
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          touch .config
          echo CONFIG_DEVEL=y >> .config
          echo CONFIG_AUTOREMOVE=y >> .config
          echo CONFIG_CCACHE=y >> .config
          echo CONFIG_BUILD_ALL_HOST_TOOLS=y >> .config

      - name: Make prereq
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make defconfig

      - name: Build tools
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          make tools/install -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh
          echo "${{ hashFiles('openwrt/include/**','openwrt/tools/**') }}" > .toolshash 

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-buildbot-logs
          path: openwrt/logs

      - name: Upload config
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-buildbot-config
          path: openwrt/.config

      - name: Archive prebuilt tools
        if: inputs.generate_prebuilt_artifacts == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: tar -chf tools.tar staging_dir/host build_dir/host

      - name: Upload prebuilt tools
        if: inputs.generate_prebuilt_artifacts == true
        uses: actions/upload-artifact@v4
        with:
          name: linux-buildbot-prebuilt-tools
          path: |
            openwrt/tools.tar
            openwrt/.toolshash
          retention-days: 1

      - name: Delete already present ccache cache
        if: steps.restore-ccache-cache.outputs.cache-hit == 'true'
        uses: octokit/request-action@v2.x
        with:
          route: DELETE /repos/{repository}/actions/caches?key={key}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_REPOSITORY: ${{ github.repository }}
          INPUT_KEY: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

      - name: Save ccache cache
        id: save-ccache-cache
        uses: actions/cache/save@v4
        with:
          path: openwrt/.ccache
          key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

      - name: Set output
        id: setoutput
        run: echo "push=true" >> $GITHUB_OUTPUT