name: Build sub target

on:
  workflow_call:
    secrets:
      coverity_api_token:
    outputs:
      ccache_tag:
        value: ${{ jobs.setup_build.outputs.ccache_tag }}
      push:
        value: ${{ jobs.build.outputs.push}}

    inputs:
      container_name:
        type: string
        default: tools
      target:
        required: true
        type: string
      subtarget:
        required: true
        type: string
      testing:
        type: boolean
      build_toolchain:
        type: boolean
      include_feeds:
        type: boolean
      build_full:
        type: boolean
      build_kernel:
        type: boolean
      use_openwrt_container:
        type: boolean
        # default: true
      build_external_toolchain:
        type: boolean
      upload_external_toolchain:
        type: boolean
      build_prebuild_toolchain:
        type: boolean        
      upload_prebuild_toolchain:
        type: boolean        
      use_ccache_cache:
        type: boolean
        default: true
      ccache_type:
        type: string
        default: kernel
      upload_ccache_cache:
        type: boolean
      check:
        type: boolean
      check_packages_list:
        type: string
      repo_url:
        required: true
        type: string
      repo_branch:
        required: true
        type: string
      author:
        required: true
        type: string
      config_name:
        description: 'Config file name'
        type: string
      debug:
        type: boolean

permissions:
  contents: read

jobs:
  setup_build:
    name: Set up build ${{ inputs.target }}/${{ inputs.subtarget }}
    runs-on: ubuntu-latest
    outputs:
      container: ${{ steps.determine_container.outputs.container }}
      ccache_tag: ${{ steps.determine_container_name.outputs.container_tag }}
      ccache_name: ${{ steps.determine_ccache_info.outputs.ccache_name }}      
      device_name: ${{ steps.get_info.outputs.device_name }}
      file_date: ${{ steps.get_info.outputs.file_date }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          ref: ${{ github.ref_name }}


      - name: Set lower case owner name
        id: lower_owner
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" \
            | tr '[:upper:]' '[:lower:]')

          if [ ${{ inputs.use_openwrt_container }} == "true" ]; then
            OWNER_LC=openwrt
          fi

          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT

      # Per branch tools container tag
      # By default stick to latest
      # For official test targetting openwrt stable branch
      # Get the branch or parse the tag and push dedicated tools containers
      # For local test to use the correct container for stable release testing
      # you need to use for the branch name a prefix of openwrt-[0-9][0-9].[0-9][0-9]-
      - name: Determine container name
        id: determine_container_name
        run: |
          CONTAINER_NAME=${{ inputs.container_name }}
          CONTAINER_TAG=${{ inputs.author }}_${{ inputs.repo_branch }}

          if [ "$CONTAINER_NAME" = "toolchain" -o "$CONTAINER_NAME" = "pre-toolchain" ]; then
            GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)
            GHCR_HEADER="Authorization: Bearer ${GHCR_TOKEN}"
            GHCR_MANIFEST_LINK=https://ghcr.io/v2/${{ steps.lower_owner.outputs.owner_lc }}/${{ inputs.container_name }}/manifests/${{ inputs.target }}-${{ inputs.subtarget }}-"$CONTAINER_TAG"
            # Check if container exist
            if [ $(curl -s -o /dev/null -w "%{http_code}" -H "$GHCR_HEADER" -I "$GHCR_MANIFEST_LINK") = 200 ]; then
              CONTAINER_TAG=${{ inputs.target }}-${{ inputs.subtarget }}-"$CONTAINER_TAG"
            else
              CONTAINER_NAME=tools
            fi
          fi

          echo "Tools container to use $CONTAINER_NAME:$CONTAINER_TAG"
          echo "container_tag=$CONTAINER_TAG" >> $GITHUB_OUTPUT
          echo "container_name=$CONTAINER_NAME:$CONTAINER_TAG" >> $GITHUB_OUTPUT

      - name: Determine container
        id: determine_container
        run: |
          if [ ${{ inputs.build_prebuild_toolchain}} = 'true' ]; then
            echo "container=ghcr.io/openwrt/buildbot/buildworker-v3.11.1" >> $GITHUB_OUTPUT
          else
            echo "container=${{ steps.lower_owner.outputs.owner_lc }}/${{ steps.determine_container_name.outputs.container_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine ccache info
        id: determine_ccache_info
        run: |
          echo "ccache_name=ccache-${{ inputs.ccache_type }}-${{ steps.determine_container.outputs.container_tag }}" >> $GITHUB_OUTPUT

      - name: Get info
        id: get_info
        if: inputs.build_full == true
        run: |
          mv ${{ inputs.config_name }} .config

          if [ $(grep -ic '^CONFIG_TARGET_MULTI_PROFILE=y' .config) -eq 1 ]
          then
            DEVICE_NAME='MULTI_PROFILE'
          else
            DEVICE_NAME=$(grep -e '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          fi
          [[ -n ${DEVICE_NAME} ]] && echo "DEVICE_NAME=$DEVICE_NAME" >> ${GITHUB_OUTPUT}
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> ${GITHUB_OUTPUT}

  check:
    name: Check packages for ${{ inputs.target }}/${{ inputs.subtarget }}
    needs: setup_build
    if: inputs.check == true
    runs-on: ubuntu-latest

    container: ghcr.io/${{ needs.setup_build.outputs.container }}

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout master directory
        uses: actions/checkout@v4
        with: 
          ref: ${{ github.ref_name }}


      - name: Checkout openwrt
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_url }}
          ref: ${{ inputs.repo_branch }}
          path: openwrt

      - name: Fix permission
        run: chown -R buildbot:buildbot .

      - name: Prepare prebuilt tools
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          # [ ! -d staging_dir ] && [ ! -d build_dir ] && mkdir -p staging_dir build_dir
          ln -s /prebuilt_tools/staging_dir staging_dir
          ln -s /prebuilt_tools/build_dir build_dir

          ../.github/workflows/scripts/ext-tools.sh --refresh

      - name: Configure all modules
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          echo CONFIG_ALL=y >> .config

          echo CONFIG_TARGET_MULTI_PROFILE=y >> .config
          echo CONFIG_TARGET_PER_DEVICE_ROOTFS=y >> .config
          echo CONFIG_TARGET_ALL_PROFILES=y >> .config

          echo CONFIG_DEVEL=y >> .config
          echo CONFIG_AUTOREMOVE=y >> .config

          echo "CONFIG_TARGET_${{ inputs.target }}=y" >> .config
          echo "CONFIG_TARGET_${{ inputs.target }}_${{ inputs.subtarget }}=y" >> .config

          make defconfig

      - name: Compile needed host tools
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make tools/tar/compile -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh

      - name: Download and check toolchain
        if: inputs.build_toolchain == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make toolchain/download toolchain/check FIXUP=1 -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh

      - name: Download and check packages
        if: inputs.build_full == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          # With push events or check_packages_list set to all check all packages
          if [ "${{ github.event_name }}" = "push" ] || [ "${{ inputs.check_packages_list }}" = "all" ]; then
            make package/download package/check FIXUP=1 -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh
          # With every other event check only changed packages (if provided)
          elif [ -n "${{ inputs.check_packages_list }}" ]; then
            for package in ${{ inputs.check_packages_list }}; do
              make package/$package/download package/$package/check FIXUP=1 -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh
            done
          fi

      - name: Validate checked packages
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          . ../.github/workflows/scripts/ci_helpers.sh

          if git diff --name-only --exit-code; then
            success "All packages seems ok"
          else
            err "Some package Makefiles requires fix. (run 'make package/check FIXUP=1' and force push this pr)"
            err "You can also check the provided artifacts with the refreshed patch from this CI run."
            mkdir packages-fixed
            for f in $(git diff --name-only); do
              cp --parents $f packages-fixed/
            done
            exit 1
          fi

      - name: Upload fixed Packages
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.target }}-${{ inputs.subtarget }}${{ inputs.testing == true && '-testing' || '' }}-packages-fixed
          path: openwrt/packages-fixed

  build:
    name: Build ${{ inputs.target }}/${{ inputs.subtarget }}
    needs: setup_build
    runs-on: ubuntu-latest
    outputs:
      push: ${{ steps.setoutput.outputs.push }}

    container: ghcr.io/${{ needs.setup_build.outputs.container }}

    permissions:
      contents: read
      packages: read
      actions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          ref: ${{ github.ref_name }}


      - name: Checkout openwrt
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_url }}
          ref: ${{ inputs.repo_branch }}
          path: openwrt
        
      - name: Parse toolchain file
        if: inputs.build_toolchain == false
        id: parse-toolchain
        working-directory: openwrt
        run: |
          if [ -d /external-toolchain/ ]; then
            echo "toolchain-type=external_container" >> $GITHUB_OUTPUT
            exit 0
          elif [ -d /prebuilt-toolchain/ ]; then
            echo "toolchain-type=prebuilt_container" >> $GITHUB_OUTPUT
            exit 0
          fi

          TOOLCHAIN_PATH=snapshots
          DOWNLOADSERVER="https://downloads.cdn.openwrt.org"
          if ${{ inputs.author}} = "openwrt"; then
            if [ -n "${{ github.base_ref }}" ]; then
              if echo "${{ github.base_ref }}" | grep -q -E '^openwrt-[0-9][0-9]\.[0-9][0-9]$'; then
                major_ver="$(echo ${{ github.base_ref }} | sed 's/^openwrt-/v/')"
              fi
            elif [ "${{ github.ref_type }}" = "branch" ]; then
              if echo "${{ inputs.repo_branch }}" | grep -q -E '^openwrt-[0-9][0-9]\.[0-9][0-9]$'; then
                major_ver="$(echo ${{ inputs.repo_branch }} | sed 's/^openwrt-/v/')"
              elif echo "${{ inputs.repo_branch }}" | grep -q -E '^openwrt-[0-9][0-9]\.[0-9][0-9]-'; then
                major_ver="$(echo ${{ inputs.repo_branch }} | sed 's/^openwrt-\([0-9][0-9]\.[0-9][0-9]\)-.*/v\1/')"
              fi
            elif [ "${{ github.ref_type }}" = "tag" ]; then
              if echo "${{ inputs.repo_branch }}" | grep -q -E '^v[0-9][0-9]\.[0-9][0-9]\..+'; then
                major_ver="$(echo ${{ inputs.repo_branch }} | sed 's/^\(v[0-9][0-9]\.[0-9][0-9]\)\..\+/\1/')"
              fi
            fi

            if [ -n "$major_ver" ]; then
              git fetch --tags -f
              latest_tag="$(git tag --sort=-creatordate -l $major_ver* | head -n1)"
              if [ -n "$latest_tag" ]; then
                TOOLCHAIN_PATH=releases/$(echo $latest_tag | sed 's/^v//')
              fi
            fi
          elif ${{ inputs.author}} = "immortalwrt"; then
            TOOLCHAIN_PATH=releases/${{ inputs.repo_branch }}-SNAPSHOT
            DOWNLOADSERVER="https://mirrors.vsean.net/"
          fi

          SUMS_FILE="$DOWNLOADSERVER/$TOOLCHAIN_PATH/targets/${{ inputs.target }}/${{ inputs.subtarget }}/sha256sums"
          if curl $SUMS_FILE | grep -q ".*wrt-toolchain.*tar.xz"; then
            TOOLCHAIN_STRING="$( curl $SUMS_FILE | grep ".*wrt-toolchain.*tar.xz")"
            TOOLCHAIN_FILE=$(echo "$TOOLCHAIN_STRING" | sed -n -e 's/.*\(wrt-toolchain.*\).tar.xz/\1/p')

            echo "toolchain-type=external_toolchain" >> $GITHUB_OUTPUT
          elif curl $SUMS_FILE | grep -q ".*wrt-sdk.*tar.xz"; then
            TOOLCHAIN_STRING="$( curl $SUMS_FILE | grep ".*wrt-sdk.*tar.xz")"
            TOOLCHAIN_FILE=$(echo "$TOOLCHAIN_STRING" | sed -n -e 's/.*\(wrt-sdk.*\).tar.xz/\1/p')

            echo "toolchain-type=external_sdk" >> $GITHUB_OUTPUT
          else
            echo "toolchain-type=internal" >> $GITHUB_OUTPUT
          fi

          echo "TOOLCHAIN_FILE=$TOOLCHAIN_FILE" >> "$GITHUB_ENV"
          echo "TOOLCHAIN_PATH=$TOOLCHAIN_PATH" >> "$GITHUB_ENV"
          echo "DOWNLOADSERVER=$DOWNLOADSERVER" >> "$GITHUB_ENV"

      - name: Fix permission
        run: |
          chown -R buildbot:buildbot . 
          [ -d /prebuilt_toolchain ] && chown -R buildbot:buildbot /prebuilt_toolchain

    

      - name: Prepare prebuilt tools
        if: inputs.build_prebuild_toolchain == false
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          # [ ! -d staging_dir ] && [ ! -d build_dir ] && mkdir -p staging_dir build_dir
          [ -d /prebuilt_toolchain ] && TOOLS_PATH="/prebuilt_toolchain" || TOOLS_PATH="/prebuilt_tools"

          ln -s /prebuilt_toolchain/staging_dir staging_dir
          ln -s /prebuilt_toolchain/build_dir build_dir

          find /prebuilt_toolchain/build_dir/toolchain-* -name ".built\*" -exec touch {} \; 
          touch "/prebuilt_toolchain/staging_dir/toolchain-*/stamp/.*"
          ../.github/workflows/scripts/ext-tools.sh --refresh

      - name: Prepare custom scripts
        if: inputs.build_full == true
        shell: su buildbot -c "sh -e {0}"
        run: |
          [ -d "files" ] && mv -f files openwrt/files
          [ -e "${FEEDS_CONF}" ] && cp -f "${FEEDS_CONF}" openwrt/feeds.conf.default
          echo "done"

      - name: Load pre-custom script
        if: inputs.build_full == true
        shell: su buildbot -c "bash {0}"
        working-directory: openwrt
        env:
          REPO_URL: ${{ inputs.repo_url }}        
        run: ${GITHUB_WORKSPACE}/diy-part1.sh

      - name: Update & Install feeds
        if: inputs.build_full == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Restore ccache cache
        id: restore-ccache-cache
        if: inputs.use_ccache_cache == true
        uses: actions/cache/restore@v4
        with:
          path: openwrt/.ccache
          key: ${{ needs.setup_build.outputs.ccache_name }}-${{ hashFiles('openwrt/include/kernel-**') }}
          restore-keys: |
            ${{ needs.setup_build.outputs.ccache_name }}-
            ccache-kernel-${{ needs.setup_build.outputs.ccache_tag}}-${{ hashFiles('openwrt/include/kernel-**') }}
            ccache-kernel-${{ needs.setup_build.outputs.ccache_tag}}-

      - name: Clean configuration
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          rm -rf .config

      - name: Load post-custom script
        if: inputs.build_full == true
        shell: su buildbot -c "bash {0}"      
        working-directory: openwrt
        env:
          REPO_URL: ${{ inputs.repo_url }}
        run: ${GITHUB_WORKSPACE}/diy-part2.sh

      - name: Setup configuration
        if: inputs.build_full == true
        shell: su buildbot -c "sh -e {0}"     
        run: cp -f ${{ inputs.config_name }} openwrt/.config

        # ccache for some reason have problem detecting compiler type
        # with external toolchain. This cause the complete malfunction
        # of ccache with the result of tons of unsupported compiler
        # option error.
        # To fix this force compiler type to gcc.
      - name: Configure ccache and apply fixes
        if: inputs.use_ccache_cache == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        env:
          SYSTEM_CCACHE_CONF: staging_dir/host/etc/ccache.conf
        run: |
          [ ! -d staging_dir/host/etc ] && mkdir -p staging_dir/host/etc
          touch $SYSTEM_CCACHE_CONF

          echo compiler_type=gcc >> $SYSTEM_CCACHE_CONF
          [ ${{ inputs.ccache_type }} = 'kernel' ] && echo max_size=400M >> $SYSTEM_CCACHE_CONF

          echo depend_mode=true >> $SYSTEM_CCACHE_CONF
          echo sloppiness=file_macro,locale,time_macros >> $SYSTEM_CCACHE_CONF

          echo CONFIG_CCACHE=y >> .config

      - name: Configure external toolchain in container
        if: inputs.build_toolchain == false && steps.parse-toolchain.outputs.toolchain-type == 'external_container'
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          echo CONFIG_DEVEL=y >> .config
          echo CONFIG_AUTOREMOVE=y >> .config

          ./scripts/ext-toolchain.sh \
            --toolchain /external-toolchain/$(ls /external-toolchain/ | grep wrt-toolchain)/toolchain-* \
            --overwrite-config \
            --config ${{ inputs.target }}/${{ inputs.subtarget }}

      - name: Configure external toolchain
        if: inputs.build_toolchain == false && steps.parse-toolchain.outputs.toolchain-type == 'external_toolchain'
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          echo CONFIG_DEVEL=y >> .config
          echo CONFIG_AUTOREMOVE=y >> .config

          ./scripts/ext-toolchain.sh \
            --toolchain ${{ env.TOOLCHAIN_FILE }}/toolchain-* \
            --overwrite-config \
            --config ${{ inputs.target }}/${{ inputs.subtarget }}

      - name: Adapt external sdk to external toolchain format
        if: inputs.build_toolchain == false && steps.parse-toolchain.outputs.toolchain-type == 'external_sdk'
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          TOOLCHAIN_DIR=${{ env.TOOLCHAIN_FILE }}/staging_dir/$(ls ${{ env.TOOLCHAIN_FILE }}/staging_dir | grep toolchain)
          TOOLCHAIN_BIN=$TOOLCHAIN_DIR/bin
          OPENWRT_DIR=$(pwd)

          # Find target name from toolchain info.mk
          GNU_TARGET_NAME=$(cat $TOOLCHAIN_DIR/info.mk | grep TARGET_CROSS | sed 's/^TARGET_CROSS=\(.*\)-$/\1/')

          cd $TOOLCHAIN_BIN

          # Revert sdk wrapper scripts applied to all the bins
          for app in $(find . -name "*.bin"); do
            TARGET_APP=$(echo $app | sed 's/\.\/\.\(.*\)\.bin/\1/')
            rm $TARGET_APP
            mv .$TARGET_APP.bin $TARGET_APP
          done

          # Setup the wrapper script in the sdk toolchain dir simulating an external toolchain build
          cp $OPENWRT_DIR/target/toolchain/files/wrapper.sh $GNU_TARGET_NAME-wrapper.sh
          for app in cc gcc g++ c++ cpp ld as ; do
            [ -f $GNU_TARGET_NAME-$app ] && mv $GNU_TARGET_NAME-$app $GNU_TARGET_NAME-$app.bin
            ln -sf $GNU_TARGET_NAME-wrapper.sh $GNU_TARGET_NAME-$app
          done

      - name: Configure external toolchain with sdk
        if: inputs.build_toolchain == false && steps.parse-toolchain.outputs.toolchain-type == 'external_sdk'
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          echo CONFIG_DEVEL=y >> .config
          echo CONFIG_AUTOREMOVE=y >> .config

          ./scripts/ext-toolchain.sh \
            --toolchain ${{ env.TOOLCHAIN_FILE }}/staging_dir/toolchain-* \
            --overwrite-config \
            --config ${{ inputs.target }}/${{ inputs.subtarget }}

      - name: Configure internal toolchain
        if: inputs.build_toolchain == true || steps.parse-toolchain.outputs.toolchain-type == 'internal'
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          echo CONFIG_DEVEL=y >> .config
          echo CONFIG_AUTOREMOVE=y >> .config

          echo "CONFIG_TARGET_${{ inputs.target }}=y" >> .config
          echo "CONFIG_TARGET_${{ inputs.target }}_${{ inputs.subtarget }}=y" >> .config

          make defconfig

      - name: Show configuration
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: ./scripts/diffconfig.sh

      - name: Build tools
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make tools/install -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh

      - name: Setup Debug Session
        if: inputs.debug == true
        env:
           TMATE_ENCRYPT_PASSWORD: "12345"
           HOME: "/root"

        uses: tete1030/safe-debugger-action@master      
        
      - name: Build toolchain
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make toolchain/install -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh

      - name: Setup Debug Session
        if: inputs.debug == true
        env:
          TMATE_ENCRYPT_PASSWORD: "12345"
          HOME: "/root"

        uses: tete1030/safe-debugger-action@master

      - name: Build Kernel
        if: inputs.build_kernel == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make target/compile -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh

      - name: Save ccache kernel cache
        if: inputs.use_ccache_cache == true && inputs.build_kernel == true
        uses: actions/cache/save@v4
        with:
          path: openwrt/.ccache
          key: ccache-kernel-${{ needs.setup_build.outputs.ccache_tag}}-${{ hashFiles('openwrt/include/kernel-**') }}

      - name: Build Kernel Kmods
        if: inputs.build_kernel == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make package/linux/compile -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh

      - name: Build everything
        if: inputs.build_full == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh

      - name: Build external toolchain
        if: inputs.build_external_toolchain == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          make target/toolchain/compile -j$(nproc) BUILD_LOG=1 || ret=$? ../.github/workflows/scripts/show_build_failures.sh

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.target }}-${{ inputs.subtarget }}${{ inputs.testing == true && '-testing' || '' }}-logs
          path: "openwrt/logs"

      - name: Delete already present ccache cache
        if: steps.restore-ccache-cache.outputs.cache-hit == 'true' && inputs.use_ccache_cache == true
        uses: octokit/request-action@v2.x
        with:
          route: DELETE /repos/{repository}/actions/caches?key={key}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_REPOSITORY: ${{ github.repository }}
          INPUT_KEY: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

      - name: Save ccache cache
        if: inputs.use_ccache_cache == true
        uses: actions/cache/save@v4
        with:
          path: openwrt/.ccache
          key: ${{ steps.restore-ccache-cache.outputs.cache-primary-key }}

      - name: Archive ccache
        if: inputs.use_ccache_cache == true  && inputs.upload_ccache_cache == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: tar -cf ${{ needs.setup_build.outputs.ccache_name }}.tar .ccache

      - name: Upload ccache cache
        if: inputs.use_ccache_cache == true && inputs.upload_ccache_cache == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.target }}-${{ inputs.subtarget }}${{ inputs.testing == true && '-testing' || '' }}-ccache-cache
          path: openwrt/${{ needs.setup_build.outputs.ccache_name }}.tar
          retention-days: 1

      - name: Find external toolchain name
        id: get-toolchain-file
        if: inputs.upload_external_toolchain == true
        working-directory: openwrt
        run: |
          TOOLCHAIN_FILE=$(ls bin/targets/${{inputs.target }}/${{ inputs.subtarget }}/* | grep toolchain)
          echo "toolchain-file=$TOOLCHAIN_FILE" >> $GITHUB_OUTPUT
          echo "${{ hashFiles('openwrt/toolchain/**') }}" > .toolchainhash
          echo "${{ hashFiles('openwrt/include/**','openwrt/tools/**') }}" > .toolshash 

      - name: Upload prebuilt toolchain
        if: inputs.upload_external_toolchain == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.target }}-${{ inputs.subtarget }}-external-toolchain
          path: |
            openwrt/${{ steps.get-toolchain-file.outputs.toolchain-file }}
            openwrt/.toolchainhash
            openwrt/.toolshash

      - name: Archive prebuilt toolchain
        if: inputs.upload_prebuild_toolchain == true
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: |
          tar -cf toolchain.tar.zst -I 'zstd -T0 -6' staging_dir/ build_dir/
          echo "${{ hashFiles('openwrt/toolchain/**') }}" > .toolchainhash
          echo "${{ hashFiles('openwrt/include/**','openwrt/tools/**') }}" > .toolshash 
            
      - name: Upload prebuilt toolchain
        if: inputs.upload_prebuild_toolchain == true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.target }}-${{ inputs.subtarget }}-prebuild-toolchain
          path: |
            openwrt/.toolchainhash
            openwrt/.toolshash
            openwrt/toolchain.tar.zst
          retention-days: 1

      - name: Upload Firmware
        if: inputs.build_full == true
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware_${{ needs.setup_build.outputs.device_name }}${{ needs.setup_build.outputs.file_date }}
          path: openwrt/bin

      - name: Set output
        id: setoutput
        run: echo "push=true" >> $GITHUB_OUTPUT          
